@page "/comandas"

@inject ApiService _apiService
@inject IJSRuntime JS
@inject AuthService AuthService
@inject NavigationManager Navigation

<PageTitle>Comandas</PageTitle>

@if (isLoading)
{
    <p>Verificando autenticação...</p>
}
else if (!isAuthenticated)
{
    <p>Redirecionando para o login...</p>
}
else
{
    @if (!ComandasAbertas.Any())
    {
        <p>Nenhuma comanda encontrada</p>
    }
    else
    {
        <h3 class="d-flex justify-content-center text-decoration-underline">Comandas Abertas</h3>

        <div class="mb-3">
            <input type="text" @bind="searchTerm" @bind:event="oninput" placeholder="Buscar comanda pelo número..." class="form-control mb-3" />
        </div>

        <Accordion>
            @foreach (var comanda in ComandasFiltradas)
            {
                <AccordionItem>
                    <AccordionHeader>
                        <div class="d-flex justify-content-between align-items-center w-100">
                            <span class="fw-bold fs-1 text-center">
                                Comanda <span class="text-decoration-underline">@comanda.IdComanda</span>
                            </span>
                            <span class="fw-bold">Valor Total: R$ @comanda.ValorTotal</span>
                        </div>
                    </AccordionHeader>
                    <AccordionBody>
                        <div>
                            <ul class="list-group">
                                @foreach (var item in comanda.Itens)
                                {
                                    <li class="list-group-item d-flex align-items-center">
                                        <div class="col-3 fw-bold">@item.ProdutoNome</div>  @* Nome do Produto *@
                                        <div class="col-2 text-center">R$ @item.PrecoUnitario</div> @* Preço Unitário *@

                                        <div class="col-3 d-flex align-items-center justify-content-center">
                                            <button class="btn btn-secondary btn-sm" @onclick="() => Decrementar(item, comanda.IdComanda)">-</button>
                                            <input type="number" class="form-control text-center mx-2" style="width: 60px;" @bind="item.Quantidade" min="1" disabled />
                                            <button class="btn btn-secondary btn-sm" @onclick="() => Incrementar(item, comanda.IdComanda)">+</button>
                                        </div>

                                        <div class="col-2 text-center fw-bold">R$ @item.ValorTotal</div> @* Valor Total *@

                                        <div class="col-2 text-end">
                                            <button class="btn btn-danger btn-sm" @onclick="() => DeletarItem(item, comanda.IdComanda)">Excluir</button>
                                        </div>
                                    </li>
                                }
                            </ul>

                            <div class="mt-3">
                                <label for="formaPagamento">Forma de Pagamento:</label>
                                <select id="formaPagamento" class="form-select" @bind="comanda.FormaPagamento">
                                    <option value="">Selecione uma forma de pagamento</option>
                                    <option value="Dinheiro">Dinheiro</option>
                                    <option value="CartaoCredito">Cartão de Crédito</option>
                                    <option value="CartaoDebito">Cartão de Débito</option>
                                    <option value="Pix">Pix</option>
                                    <!-- Adicione outras opções conforme necessário -->
                                </select>
                            </div>
                            <button class="btn btn-success mt-3" @onclick="() => FinalizarComanda(comanda)">Finalizar Comanda</button>
                            <button class="btn btn-danger mt-3 ml-2" @onclick="() => DeletarComanda(comanda.IdComanda)">Excluir Comanda</button>
                        </div>
                    </AccordionBody>
                </AccordionItem>
            }
        </Accordion>
    }
}

@code {
    private List<Comanda> ComandasAbertas = new List<Comanda>();
    private List<Comanda> ComandasFiltradas => ComandasAbertas
        .Where(c => string.IsNullOrEmpty(searchTerm) || c.IdComanda.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
        .ToList();
    private string searchTerm = "";
    private bool isAuthenticated = false;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        isAuthenticated = await AuthService.IsAuthenticated();

        if (!isAuthenticated)
        {
            Navigation.NavigateTo("/login", forceLoad: true);
        }

        isLoading = false;

        var (comandasAbertas, errorMessage) = await _apiService.GetComandas();
        if (comandasAbertas is null) return;
        foreach (var comanda in comandasAbertas)
        {
            comanda.Itens = await GetItensComanda(comanda.IdComanda);
            await AtualizaPrecoTotal(comanda.IdComanda);
        }
        ComandasAbertas = comandasAbertas;
    }

    private async Task DeletarComanda(string idComanda)
    {
        bool confirmacao = await JS.InvokeAsync<bool>("confirm", "Tem certeza que deseja apagar a comanda?");
        if (confirmacao)
        {
            bool sucesso = await _apiService.DeletarComanda(idComanda);
            if (sucesso)
            {
                ComandasAbertas.RemoveAll(c => c.IdComanda == idComanda);
            }
            else
            {
                await ShowAlert("Erro ao excluir a comanda.");
            }
        }
    }

    private async Task FinalizarComanda(Comanda comanda)
    {
        if (string.IsNullOrEmpty(comanda.FormaPagamento))
        {
            await ShowAlert("Por favor, selecione uma forma de pagamento.");
            return;
        }
        var sucesso = await _apiService.ConfirmarComanda(comanda);


        if (sucesso.Data)
        {
            await ShowAlert("Comanda finalizada com sucesso.");
            // Remove a comanda finalizada da lista
            ComandasAbertas.RemoveAll(c => c.IdComanda == comanda.IdComanda);
        }
        else
        {
            await ShowAlert("Erro ao finalizar a comanda.");
        }
        StateHasChanged(); // Atualiza a UI
    }

    private async Task Decrementar(ComandaItem itemComanda, string idComanda)
    {
        if (itemComanda.Quantidade == 1) return;

        itemComanda.Quantidade--;
        await _apiService.AtualizaQuantidadeItemComanda(itemComanda.ProdutoId, "diminuir", idComanda);
        AtualizaPrecoTotal(idComanda);
        await Task.Delay(100);
        StateHasChanged(); // Atualiza a UI
    }

    private async Task Incrementar(ComandaItem itemComanda, string idComanda)
    {
        itemComanda.Quantidade++;
        await _apiService.AtualizaQuantidadeItemComanda(itemComanda.ProdutoId, "aumentar", idComanda);
        AtualizaPrecoTotal(idComanda);
        await Task.Delay(100);
        StateHasChanged(); // Atualiza a UI
    }

    private async Task DeletarItem(ComandaItem item, string idComanda)
    {
        bool confirmacao = await JS.InvokeAsync<bool>("confirm", "Tem certeza que deseja excluir este item da comanda?");
        if (confirmacao)
        {
            var sucesso = await _apiService.AtualizaQuantidadeItemComanda(item.ProdutoId, "deletar", idComanda);
            if (sucesso.Data)
            {
                var comanda = ComandasAbertas.FirstOrDefault(c => c.IdComanda == idComanda);
                if (comanda != null)
                {
                    comanda.Itens.Remove(item);
                    await AtualizaPrecoTotal(idComanda);
                }
            }
            else
            {
                await ShowAlert("Erro ao excluir o item.");
            }
        }

    }

    private async Task<List<ComandaItem>> GetItensComanda(string idComanda)
    {
        var (itensComanda, errorMessage) = await _apiService.GetItensComanda(idComanda);
        return itensComanda ?? new List<ComandaItem>();
    }

    private async Task AtualizaPrecoTotal(string idComanda)
    {
        var comanda = ComandasAbertas.FirstOrDefault(c => c.IdComanda == idComanda);
        if (comanda != null)
        {
            comanda.ValorTotal = comanda.Itens.Sum(item => item.PrecoUnitario * item.Quantidade);
            await _apiService.AtualizarComanda(comanda);
        }
    }

    private async Task ShowAlert(string message)
    {
        await JS.InvokeVoidAsync("alert", message);
    }
}

